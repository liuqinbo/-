TS的基本使用

1.基本类型变量的使用
let variable_name:string = 'value'
    变量名         变量类型  值
  
2.函数的的使用
function liu(x?:string, y?:string='yes', ...z:string[]):retrun_type(){}
             可选参数      默认参数      剩余参数              返回类型

3.集合（数组、元组）的使用
let array:number=[1,2]一般的数组
let array:[number,string]=[1,'2']这是元组
一般的数组是存储相同的类型的数据。
元组是储存不同类型的数据的,且位置类型如有规定要一一对应，如果超过定义的数组长度则使用联合类型(即规定的所有数据类型)，不在此里就报错。

4.联合类型
let name:string|string[] 、 let name:number|string 
    变量名 类型  类型           变量名  类型   类型
写的类型都能用|可以理解为或的意思

5.接口
注意：接口只是typeScript里的东西不能转换为js,可以把接口理解为一个包装好的TS变量使用规则，而且接口是可以继承的可以通过继承其他的接口来扩展
interface Person{
  name:string,
  age:number
}
let liu:Person ={'liu',12}

6.类和接口
类可以实现接口，使用关键字 implements，并可以将接口的字段作为类的属性使用
interface ILoan { 
   interest:number 
} 
 
class AgriLoan implements ILoan { 
   interest:number 
   constructor(interest:number) { 
      this.interest = interest 
   } 
} 

7.对象
在 TypeScript 中使用以上方式则会出现编译错误，因为Typescript 中的对象必须是特定类型的实例。
鸭子类型(Duck Typing)
鸭子类型（英语：duck typing）是动态类型的一种风格，是多态(polymorphism)的一种形式。

在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由"当前方法和属性的集合"决定。

编写一个函数，它接受一个类型为"鸭子"的对象，并调用它的"走"和"叫"方法，任何拥有这样的正确的"走"和"叫"方法的对象都可被函数接受的这种行为就被称为鸭子类型
interface IPoint { 
    x:number 
    y:number 
} 
function addPoints(p1:IPoint,p2:IPoint):IPoint { 
    var x = p1.x + p2.x 
    var y = p1.y + p2.y 
    return {x:x,y:y} 
} 
 
// 正确
var newPoint = addPoints({x:3,y:4},{x:5,y:1})  
 
// 错误 
var newPoint2 = addPoints({x:1},{x:4,y:3})
 
 8.命名空间
 命名空间一个最明确的目的就是解决重名问题
 命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。
 TypeScript 中命名空间使用 namespace 来定义，语法格式如下：

namespace SomeNameSpaceName { 
   export interface ISomeInterfaceName {      }  
   export class SomeClassName {      }  
}
以上定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类和接口，则需要在类和接口添加 export 关键字。

要在另外一个命名空间调用语法格式为：

SomeNameSpaceName.SomeClassName;
 
 如果一个命名空间在一个单独的 TypeScript 文件中，则应使用三斜杠 /// 引用它，语法格式如下：

/// <reference path = "SomeFileName.ts" />

9.TypeScript 模块

TypeScript 模块的设计理念是可以更换的组织代码。
模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。

.ts 就是.js一样的东西

10.TypeScript 声明文件
 
 我们引入jq，但是typeScript 不知道引入的第三方jq是什么类型的，所以用 declare字段来帮助判断我们传入的参数类型对不对
declare let jQuery: (selector: string) => any;  等于规定它可以的什么类型的
jQuery("#ID");如直接这样用会报错,要加上面一句

声明文件或模块的语法格式如下：
declare module Module_Name {
}
