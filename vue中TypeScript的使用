一:组件的使用,props的使用,$emit的使用,watch的使用,data数据的定义,methods方法的定义,computed方法的定义,生命周期的定义
<script lang='ts'> //声明为ts
  import {Componet,Vue,Prop,Emit,Watch} from 'vue-property-decorator'
  import 引入的组件名 from 地址
  @Componet({
    name:自己的组件名, //（1）
    components:{引入的组件名} //可选
  }) //注明此类为一个vue组件
  如果不引入且组件名用（2）可这样写 简写为:@Componet
  
  export default class 自己的组件名（2） extend Vue{
    //props
    @Prop({type:Number}) readonly propA: number | undefined
    @Prop({ default: 'default value' }) readonly propB!: string
    @Prop({type:[String, Boolean]}) readonly propC: string | boolean | undefined
    相当于原本的
    props: {
      propA: {
        type: Number,
      },
      propB: {
        default: 'default value',
      },
      propC: {
        type: [String, Boolean],
      },
    }
    //emit
    @Emit()
    addToCount(n: number) {
        this.count += n
    }
    @Emit('reset')
    resetCount() {
        this.count = 0
    }
    @Emit()
    returnValue() {
        return 10
    }
    @Emit()
    onInputChange(e) {
        return e.target.value
    }
    @Emit()
    promise() {
        return new Promise(resolve => {
        setTimeout(() => {
            resolve(20)
        }, 0)
        })
    }
    相当于原本的
    methods: {
      addToCount(n) {
        this.count += n
        this.$emit('add-to-count', n)
      },
      resetCount() {
        this.count = 0
        this.$emit('reset')
      },
      returnValue() {
        this.$emit('return-value', 10)
      },
      onInputChange(e) {
        this.$emit('on-input-change', e.target.value, e)
      },
      promise() {
        const promise = new Promise(resolve => {
            setTimeout(() => {
            resolve(20)
            }, 0)
        })
        promise.then(value => {
            this.$emit('promise', value)
        })
      }
    }
    //watch
    @Watch('child')
    onChildChanged(val: string, oldVal: string) {}

    @Watch('person', { immediate: true, deep: true })
    onPersonChanged1(val: Person, oldVal: Person) {}

    @Watch('person')
    onPersonChanged2(val: Person, oldVal: Person) {}
    相当于原本的
    watch: {
      child: [
        {
          handler: 'onChildChanged',
          immediate: false,
          deep: false,
        },
      ],
      person: [
        {
          handler: 'onPersonChanged1',
          immediate: true,
          deep: true,
        },
        {
          handler: 'onPersonChanged2',
          immediate: false,
          deep: false,
        },
      ],
    },
    methods: {
      onChildChanged(val, oldVal) {},
      onPersonChanged1(val, oldVal) {},
      onPersonChanged2(val, oldVal) {},
    },
    //data 直接写
    name:string='liu' //default 默认
    protected name:string ='liu' //protected，可被继承，只可在自己或继承的类中使用
    public string ='liu' //public公共的，可以在其他类中访问可继承
    private string ='liu' //private私有的，只能自己用且无法继承
    //computed——函数名前加get就是属于computed的
    get 函数名(){
    }
    //methods——不加get就是属于methods的
    函数名(){
    }
    //生命周期写法不变
    berforeCreate(){
    }
    created(){
    }
  }
  
 自己的组件名 （1）（2）自选一处写即可
</script>

二:全局变量和方法的定义
(1)插件化
一步
vuePrototype.ts文件:
const protoInstall= {
  //options为可选参数
  install:(Vue:any,options:any)=>{
    Vue.prototype.函数名=function(){}
    Vue.prototype.属性名= xxx
  }
}
export default protoInstall
二步
mian.ts文件:
import 名字 from '对应路径/vuePrototype'
Vue.use(名字)
三步
声明文件 文件名.d.ts 文件,在src下创建,声明的变量名要与定义的一样
文件名.d.ts:
declare module "vue/types/vue" {
    interface Vue {
        属性名:string;
        函数名:Function;
    }
}
(2)mixin混入
(3)继承
具体地址:https://www.cnblogs.com/zjjDaily/p/12931624.html

三:路由定义
路由的使用不变,只不过换成ts后路由守卫里的参数要加上类型
如:router.beforeEach(to:any,from:any,next:any){
    next()
  }




