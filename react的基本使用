一 路由
 
  1.路由的配置
    import Page1 from '../container/Page1';
    import Page2 from '../container/Page2';
    import React from 'react';
    import {Router,Route,Switch,Redirect} from 'react-router-dom';
    //import { createHashHistory } from "history";
    //const history = createHashHistory();
    class RouterConfig extends React.Component{
        render(){
	    return(
	         //<Router history={history}>
		 <Router>
		    <Switch>
		        //路由重定向,exact表示严格匹配
		        <Route path='/' exact render={()=>(
			    <Redirect to='/Page1'/>
		        )}/> 
		        <Route path='/Page1' component={Page1}/>
		        <Route path='/Page2' component={Page2}/>
			<Route path="inbox" component={Inbox}> //嵌套路由
			    <Route path="/messages/:id" component={Message} />
			    {/* 动态路由 跳转 /inbox/messages/:id 到 /messages/:id */}
			    <Redirect from="messages/:id" to="/messages/:id" />
     			</Route>
		    </Switch>
	        </Router>
	    )
        }
    }
    export default RouterConfig;
    //入口文件 index.js
    import RouterConfig from './router';
    ReactDOM.render(<RouterConfig/>, document.getElementById('root'));
    
  2.路由的跳转与传参
    (1)引入式跳转与传参 
    import { Link } from 'react-router-dom' 
    <Link to='/路由' >home</Link> //跳转 
    <Link to={ {pathname:`/路由`} }>home</Link> //跳转 
    <Link to='/路由/参数字符串'>home</Link> //params跳转传参(动态路由传参) this.props.match.params接收参数,刷新参数不消失,参数在地址栏显示
    <Link to={ {pathname:`/路由`,query:{key值：val值}} } >home</Link> //query跳转传参 this.props.location.query接收参数,刷新参数消失,参数在地址栏不显示
    <Link to={ {pathname:`/路由`,state:{key值：val值}} } >home</Link> //state跳转传参 this.props.location.state接收参数,刷新参数不消失,参数在地址栏不显示
    (2)编程式跳转与传参
    this.props.history.push('/路由')//跳转
    this.props.history.push({pathname:`/路由`})//跳转
    this.props.history.push('/路由/参数字符串') //params跳转传参(动态路由传参)  this.props.match.params接收参数,刷新参数不消失,参数在地址栏显示
    this.props.history.push({pathname:`/路由`,query:{key值：val值}})//query跳转传参 this.props.location.query接收参数,刷新参数消失,参数在地址栏不显示
    this.props.history.push({pathname:`/路由`,state:{key值：val值}})//state跳转传参 this.props.location.state接收参数,刷新参数不消失,参数在地址栏不显示
    
  3.进阶--> 路由守卫
    可以用render来实现
    
二 页面间的数据传递

  组件名：对于react来说类名就是组件名
  1.父子页面之前的传递
    案例网址：https://blog.csdn.net/qq_46370075/article/details/107229824
    (1)父传子
    父：<子组件名称  属性名称 = {传递的数据} /> 
    子：this.props.属性名称 
    (2)子传父
     父：定义函数、<子组件名称  属性名称 = {函数(参数)} /> 
     子：this.props.属性名称(参数)
     
  2.兄弟页面之间的传递
    (1)通过先传给父，再由父传给其他子组件
    
  3.深层次的传递
    redux则是一个纯粹的状态管理系统，任何的框架都可以用
    react-redux是针对react将redux和react框架结合起来使用的东西
    (1)redux创建一个store
       一般用法
       import { createStore } from 'redux'
       let defaultState = { goodlist: [] }
       function reducer(state = defaultState, action) {
           switch (action.type) {
                case 'ADD_TO_CART':
                   return {
                        ...state,
                        goodlist: [...state.goodlist, action.payload]
                   }
               default:
                   return state
            }
       }
       const store = createStore(reducer)
       export default store;
       
       模块化
       import {combineReducers} from 'redux';
       import cartReducer from './cart';
       import commonReducer from './common';

       export default combineReducers({
           cart:cartReducer,
           common:commonReducer
       });
  	    模块cart，common一般用法一样写。
	    原本state.属性变成 state.cart/common(模块名).属性
    (2)用react-redux将store与Provide 联合起来
      import { Provider } from 'react-redux';
      import store from './redux'
      <Provider store={store}>
          <HashRouter>
             <App />
          </HashRouter>
       </Provider>
    (3)使用方法
       作用：connect是连接React组件与 Redux store
       import { connect } from 'react-redux'
       //下面的return后会在props中
       const mapStateToProps = (state) => {
         return {
           goodlist: state.goodlist 
         }
         
       }
       const mapDispatchToProps = (dispatch) => {
          return {
               change(value) {
                   let action = {
                       type: 'ADD_TO_CART',
                       payload: value
                   }
                   //change方法会通过dispatch触发reducer.js里的修改方法
                   dispatch(action)
               }
          }
        }
        //mapStateToProps，把state映射到组件props中。mapDispatchToProps把dispatch映射到组件props中
        export default connect(mapStateToProps,mapDispatchToProps)(组件名)
     (4)新方法：Dva
     
三 网络请求
  
  1.用XMLHttpRequest创建的请求或者jq的ajax请求
    实例地址：https://zhuanlan.zhihu.com/p/191391288
    
  2.axios
  创建实例
  import axios from 'axios' 
  import React from 'react';
  const instance = axios.create({
  	method:'post/get',//默认请求方式
	baseURL:'http://127.0.0.1',//默认请求路径
	headers:{'key':1},//默认请求头
	timeout:5000,/默认请求超时时间
  })
  //将instance实例和axios放入全局这样在哪个页面都可以使用了
  React.Component.prototype.$axios = axios
  React.Component.prototype.$instance = instance
  页面中的使用
  import React, { Component } from 'react'
  async example(){
      try{
            let data = await this.instance({
                url:'/index',
                data:{
                      key:1
                }
            })
           //得到data后面就可以写你要的逻辑了
	   if(data.code==0){
	       xxx
	   }
      }catch(err){
	  console.log(err)
      }
  }
  因为之前创建实例的时候都定义了默认的东西，所以在用的时候如果没有修改的话直接这样写就行。
  因为是异步请求所以会用到async 和 await
  
四 事件(交互功能)

  1.事件的绑定
    react中采用on+事件名的方式来绑定一个事件，React里的事件是驼峰如onClick，React的事件并不是原生事件，而是合成事件。
    例如：<button onClick={this.Example}>
    
  2.事件的传参
    要传参首先要绑定this，因为类的方法默认不会绑定this,所以在调用的时候如果忘记绑定，this的值将会是undefined
    如果函数不绑定this直接传参的话会在加载时被调用不会等到触发对应事件时才调用 
    如 <button onClick={this.函数名(参数一,参数二)}>例子</button> 如果此为没有绑定this的情况下会在加载代码过程中直接掉用函数
    
    绑定this的方法与传参方式
    (1),(2),(3)的函数为普通函数 函数名(){ console.log('this is ',this) }
    (1)在构造函数中绑定 此为react官方推荐绑定方式
       constructor(props) {
           super(props)
	   this.函数名=this.函数名.bind(this)//绑定this
	   this.函数名=this.函数名.bind(this,参数一,参数二)//绑定加传参
       }
    (2)使用箭头函数，有一个潜在的性能问题，每次组件渲染时都生成了新的回调函数
       <button onClick={ ()=>{ this.函数名 } }>例子</button>//绑定this
       <button onClick={ ()=>{ this.函数名(参数一,参数二) } }>例子</button>//绑定加传参
    (3)使用bind()，有一个潜在的性能问题，每次组件渲染时都生成了新的回调函数
       <button onClick={ this.函数名.bind(this) }>例子</button>//绑定this
       <button onClick={ this.函数名.bind(this,参数一,参数二) }>例子</button>//绑定加传参
    (4)使用class properties(类属性)进行绑定 
       函数名 = (参数) => {console.log('this is:', this)} 箭头函数
       <button onClick={this.函数名}>例子</button>
       <button onClick={this.函数名(参数)}>例子</button>//传参
    
五 属性等基本使用的总结

  1.变量的定义、赋值与改变
    函数中的变量与原生的js没有什么区别，但是在state的变量就有所不同了
    定义、赋值
    this.state={
    	name:liu
    }
    修改 this.setState({name:LIU}) ,修改时要用setState不要直接改变state，因为直接改变无法触发react的重新渲染(render)还有state可能会异步更新
    
  2.变量和函数在html中的使用方式
    变量在react中都是用{}括起来表示的不管是函数还是变量
    this.Example为函数，value为变量
    如：<button onClick={ this.Example } >{value}</button>
    
  3.生命周期
    挂载
	当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：
	constructor()//构造函数
	static getDerivedStateFromProps() //会在调用 render 方法之前调用，它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。
	render()//渲染
	componentDidMount()//挂载后
    更新
	当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：
	static getDerivedStateFromProps() //会在调用 render 方法之前调用，它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。
	shouldComponentUpdate() //判断是否重新渲染页面 ，true往下走 ，false不重新渲染
	render()//渲染
	getSnapshotBeforeUpdate()//在最近一次渲染输出（提交到 DOM 节点）之前调用即更新前
	componentDidUpdate()//更新后
    卸载
	当组件从 DOM 中移除时会调用如下方法：
	componentWillUnmount() //将卸载
    错误
        static getDerivedStateFromError(error) //此生命周期会在后代组件抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新 state
	注意:getDerivedStateFromError() 会在渲染阶段调用，因此不允许出现副作用。 如遇此类情况，请改用 componentDidCatch()。
	componentDidCatch(error,info)
        1.error —— 抛出的错误。
	2.info —— 带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息。
	componentDidCatch() 会在“提交”阶段被调用，因此允许执行副作用。

