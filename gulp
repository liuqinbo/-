1.创建文件夹
2.进入文件夹初始化 npm init 
3.安装对应依赖
* gulp         gulp模块
* gulp-concat  合并文件
* gulp-htmlmin 压缩html
* gulp-uglify  压缩js
* gulp-csso    压缩css
* gulp-imagemin    压缩图片
* gulp-clean   清空文件夹
* gulp-babel，babel-core 和babel-preset-es2015 将es6转换为es5  
注意：gulp要在当前目录安装和全局安装
4.创建gulpfile.js文件
引入对应依赖，编写代码
如
/**
* gulp         gulp模块
* gulp-concat  合并文件
* gulp-htmlmin 压缩html
* gulp-uglify  压缩js
* gulp-csso    压缩css
* gulp-imagemin    压缩图片
* gulp-video64     压缩视频
* gulp-clean   清空文件夹
* gulp-babel，babel-core 和babel-preset-es2015将es6转换为es5  
*/
var gulp = require('gulp');
var htmlmin = require('gulp-htmlmin');          // 压缩html
var babel = require('gulp-babel');          // es6转es5
var concat = require('gulp-concat');        // 合并文件
var uglify = require('gulp-uglify');        // js 压缩
var csso = require('gulp-csso');            // css压缩
var imagemin = require('gulp-imagemin');    // 图片压缩
var video = require('gulp-video64');    // 图片压缩
var clean = require('gulp-clean');          // 清空文件夹

// 打包html
gulp.task('html', function(){
  return gulp.src('./src/*.html')
      .pipe(
        //压缩html
        htmlmin( 
          { 
            removeComments: true, //清除HTML注释
            collapseWhitespace: true, //压缩HTML
            minfyJS: true,//压缩JS
            minfyCss: true,//压缩CSS
          }
        )
      )
      .pipe(gulp.dest('./dist'));
});

// es6 转换为 es5
gulp.task('es6',  () => {
  return gulp.src('./dist/js/**/*.js')
    .pipe(babel())
    .pipe(gulp.dest('./dist/js'));
});
// 转es5-压缩js
gulp.task('js', function(){
  return gulp.src('./src/js/**/*.js')
      .pipe(babel()) //转换为es5
      .pipe(uglify())  // 压缩js
      .pipe(gulp.dest('./dist/js'));
});
// 转es5-压缩-合并js
gulp.task('oneJs', function(){
  return gulp.src('./src/js/**/*.js')
      .pipe(concat('main.min.js'))    // 合并文件并命名
      .pipe(babel()) //转换为es5
      .pipe(uglify())  // 压缩js
      .pipe(gulp.dest('./dist/js'));
});

// 压缩css
gulp.task('css', function(){
  return gulp.src('./src/css/**/*.css')
      .pipe(csso())                   // 压缩优化css
      .pipe(gulp.dest('./dist/css'));
});
//压缩-合并css
gulp.task('oneCss', function(){
  return gulp.src('./src/css/**/*.css')
      .pipe(concat('main.min.css')) // 合并文件并命名
      .pipe(csso())                   // 压缩优化css
      .pipe(gulp.dest('./dist/css'));
});

// 压缩img，video，audio资源
gulp.task('img', function () {
  return gulp.src('./src/img/**/*.*')
      .pipe(imagemin({
          progressive: true,
      }))
      .pipe(gulp.dest('./dist/img'));
});
gulp.task('video',function(){
  return gulp.src('./src/img/*.mp4')
        .pipe(video())
        .pipe(gulp.dest('./dist/img'));
})
// 不压缩
gulp.task('noimg', function () {
  return gulp.src('./src/img/*.*')
      .pipe(gulp.dest('./dist/img'));
});


// 清空dist文件夹
gulp.task('clean', function(){
  return gulp.src(['./dist/*'])
      .pipe(clean());
});

//压缩 css、js不和并
gulp.task(
  'cj',
  gulp.series("clean","js","css")
)
//压缩 css、js、img不和并
gulp.task(
  'cji',
  gulp.series("clean","js","css","img")
)
// build 不和并
gulp.task(
  'build', 
  gulp.series("clean",'html','js','css','img')
);
// build 合并
gulp.task(
  'oneBuild',
  gulp.series("clean",'html', 'oneJs','oneCss','img')
);

注意：gulpfile.js文件名为特殊文件名不可修改
