# study-file
学习文档
1.修改vue的指定端口号，在跟目录下创建一个vue.config.js
代码如下
    module.exports = {
      productionSourceMap: false, //不显示源码
      devServer: {
        port: 3000, // 端口
      },
    }
2.遇到的错误
sockjs其实其作用就是保证我们在改完代码重新编译之后，能够通知浏览器重新加载变更结果

vue-cli3 一直运行 /sockjs-node/info?t= 
解决方案 
如果你的项目没有用到 sockjs，vuecli3 运行 npm run serve 之后 network 里面一直调研一个接口：http://localhost:8080/sockjs-node/info?t=1462183700002

1. 找到/node_modules/sockjs-client/dist/sockjs.js 

2.找到代码的 1755行  

  try {
      //  self.xhr.send(payload); 把这里注掉
      } catch (e) {
        self.emit('finish', 0, '');
        self._cleanup(false);
      }

3.上线时出现connection_refused
是因为host地址(ip地址)不让访问，所以出现错误，将dev(vue.config.js文件中)中的host改为可以访问的IP地址就行，如服务器端的ip，或者自己的IP地址
devServer: {
        port: 7000, // 端口
        sockHost: '10.0.0.0', //改为可以访问的地址
        disableHostCheck: true,
 },


总结：上线时要将2.3搞好再提交

4.用scss或less就可以把单独的样式文件变成一个局部的样式

5.keep-alive的include和exclude的是写的是组件名，但是不是写在路由那里，是要写在单文件组件里面

6.process.env.NODE_ENV 判断当前的环境
  //开发与生产环境用不同的接口
  let ssoUrl=null
  let picUrl=null
  if(process.env.NODE_ENV=='development'){  //开发环境
    开发环境的接口地址
  }else{
    生产环境的接口地址
  }

7.navigator.userAgent 用来判断是手机端还是pc端
 //判断是否是手机打开
 if(/Android|webOS|iPhone|iPad|BlackBerry/i.test(navigator.userAgent)) {
  window.console.log('手机打开')
 }else{
  window.console.log('其他打开')
 }
8.二级目录
(1)路由那里加给base:'二级目录名称'
mode: 'hash', // 默认hash
base:'/mob/',	
(2)vue.config.js里加  publicPath:'二级目录名称'
module.exports = {
    publicPath:'/mob/',
    devServer: {
        port: 80, // 端口
    }
}
9.style 不加scope就能修改ui框架的默认样式

10. 打包时隐藏源码  在vue.config.js 中设置 productionSourceMap ：false

11.css样式鼠标不可点 cursor:not-allowed; pointer-events:none(禁止触发事件，鼠标样式禁止）

12.vue axios取消请求
//全局取消请求数组
Vue.prototype.$arr=[]
//请求拦截
platform.interceptors.request.use(
  config => {
    config.cancelToken=new axios.CancelToken(cancel=>{
      Vue.prototype.$arr.push({cancel,'url':config.url})
    })
  }
)
//响应拦截
platform.interceptors.response.use(
  response => {
    Vue.prototype.$arr.forEach((element,index)=> {
      if(element.url==response.config.url){
        Vue.prototype.$arr.splice(index,1); 
      }
    });
  }
)
//路由拦截
router.beforeEach(async (to, from, next) => {
    Vue.prototype.$arr.forEach((ele)=>{
        ele.cancel()
    })
    Vue.prototype.$arr=[]
})

13.打包会要有一个配置文件写在public里(因为里面的代码不会build)写一个js代码全局对象，然后在index.html用<srcipt>标签引入js配置文件，然后在项目里就可以用window直接充值配置文件里的东西了，
build后也不影响

14.如果是用ip地址访问的网站的话用meta设置默认使用内核是无效的，依然会用ie内核

15.antd design of vue 自定义主题
vue.config.js 配置
.babelrc 配置

16.autocomplete="off" 在谷歌保存密码后没有用 要用 autocomplete="new-password" 才有效

17. 复制
    <label>原生JS的复制实现</label>
    <input id="text" placeholder="复制内容"/>
    <button id="copy">复制</button>
    <script>
        let text=document.getElementById('text')
        let copy=document.getElementById('copy')
        copy.onclick=()=>{
            if(!text.value){
                alert('复制内容不能为空')
                return
            }
            let oInput = document.createElement('input'); //创建一个标签
            oInput.value = text.value;//把值赋给他
            document.body.appendChild(oInput);//插入
            oInput.select(); // 选择对象;
            document.execCommand("Copy"); // 执行浏览器复制命令
            if(oInput.value){
                alert('复制成功');
            }else{
                alert('复制失败')  
            }
            oInput.remove() //删除标签
        }
    </script>

18.在vue中使用setInterval时记得在钩子函数中销毁，不然会让内存溢出。销毁是最好用异步的方式套个setTimeout不然可能会无法销毁，特别是异步请求里使用一定要用

19.element自定义主题颜色
创建scss文件 如 liu.scss
然后在main里面引入scss文件就可以了，当然如果没有引入scss模块要记得引入

20. -webkit-tap-highlight-color:transparent;   去手机点击时的阴影

21.\u0022 正则中表示双引号

22.vue 的插槽用法
//普通具名插槽
<slot name="插槽名"></slot>
<template v-slot:插槽名></template>
//具名作用域插槽
<slot name="插槽名" v-bind:变量名="变量名"> </slot>
<template v-slot:插槽名="变量名">
   {{变量名}}
</template>

23.用node写简单的静态资源服务器
1.创建一个文件
2.npm init 初始化然后填写相关信息(如不想写也可一路回车，不过建议作者那一项还是写比较好)
3.npm i express或(koa,koa-static)，supervisor  下载依赖 第一个静态资源服务器主要工具 第二个为脚本工具自动重启服务类似热更新
4.创建一个的json的配置文件文件，如最简单的
{
    "PORT": 80//表示端口号
}
5.
在根目录创建一个server.js文件 写入代码

此为express的写法
const express = require("express")  //引进express
const { PORT } = require("./config.json")  //引进配置文件
const app = express()   //创建服务器
app.use(express.static("./dist"))  //创建静态资源服务器
app.listen(PORT, (req, res) => {  //监听端口号
    console.log(`localhost:${PORT} 服务端口启动成功`)
    let os=require("os") //获取本地以太网所有信息
    let localIP =os.networkInterfaces()['以太网'][1]['address']//本地IP地址
    console.log(`${localIP}:${PORT} 服务端口启动成功`)
})

此为koa的写法
const koa = require('koa') //引进koa
const staticServer = require('koa-static') //引进koa-static
const {PORT} = require('./config.json') //引进配置文件
const app = new koa() //创建服务器
app.use(staticServer('./dist')) //创建静态资源服务器
app.listen(PORT,(req, res)=>{ //监听端口号
    console.log(`localhost:${PORT} 服务端口启动成功`)
    let os=require("os") //获取本地以太网所有信息
    let localIP =os.networkInterfaces()['以太网'][1]['address']//本地IP地址
    console.log(`${localIP}:${PORT} 服务端口启动成功`)
})


6.在根目录下运行代码 supervisor server 或 node server  一个为脚本运行，一个为普通运行，普通运行不会自动重启


24.try catch抛出 Error:Network Error 有可能是跨域了。电脑没问题大部分手机也没问题，小部分手机有问题。排查出不是前端的问题是后端的问题
最后发现是后端在配置请求头的时候用的 * 表示所有而有的浏览器不支持 * 表示所有如ie，所以跨域报错了。只要配置好请求头就可以解决问题

25.let const 在什么时候应该用什么？
一般来说看定义的是否为可变变量，变的话用let，不变的const。但是还是要看具体情况而定，一般遵守最小特权原则。

26.判断一个变量是什么类型可以用什么方式来检查？
1.typeof 只能检查基本类型，复杂类型无法精确检查只会得到Object  例:typeof 变量
2.isAarry 检查是否是数组 es5方法  例: Array.isArray(变量)
3.用构造器等到构造函数来判断，当然前提是构造器没有被修改  例: 变量.construct===Object/Array/function/Function 
4./toString()方法,与call()方法结合;用来进行数据类型检测 例: Object.prototype.toString.call(变量)  结果为'[object 结果]'

27.CSS——解决hover离开时效果突然消失的问题
在样式本身加上transition
如  img{transition：all 1s} img：hover{transform:scale(1.1);transition：all 1s}

28.VUE的SEO解决方法——预渲染，会将一个路由打包层一个html文件
1.下载模块 prerender-spa-plugin
2.将路由的模式改为history，注意不能有动态路由，不然后期打包会出问题
3.在mian.js的new Vue里加 mouted(){}
new Vue({
  router,
  render: h => h(App),
  mounted () { 
    document.dispatchEvent(new Event('render-event'))  
  }
}).$mount('#app')
4.在vue.config.js里代码如下
const path = require('path');
const PrerenderSPAPlugin = require('prerender-spa-plugin');
const Renderer = PrerenderSPAPlugin.PuppeteerRenderer;
module.exports = {
    publicPath:'/',
    configureWebpack: config => {
        if (process.env.NODE_ENV === 'production') {
            // 为生产环境修改配置...
            return {
                plugins: [
                    // 预渲染配置
                    new PrerenderSPAPlugin({
                        //要求-给的WebPack-输出应用程序的路径预渲染。
                        staticDir: path.join(__dirname, 'dist'),
                        //必需，要渲染的路线。
                        routes: ['/list','/download','/detail'],
                        //必须，要使用的实际渲染器，没有则不能预编译
                        renderer: new Renderer({
                            inject: {
                                foo: 'bar'
                            },
                            headless: false, //渲染时显示浏览器窗口。对调试很有用。  
                            //等待渲染，直到检测到指定元素。
                            //例如，在项目入口使用`document.dispatchEvent(new Event('custom-render-trigger'))` 
                            renderAfterDocumentEvent: 'render-event'
                        })
                    })
                ],
            }
        } else {
            // 为开发环境修改配置...
            return;
        }
    }
}

29.只能输入数字输入其它的会被删除onkeyup="if (!/^\d+$/.test(this.value)) {this.value = this.value.replace(/[^\d]+/g, '')}"

30.页面禁止图片拖拽document.ondragstart=function() {return false;}

31.axios的get传参用params:{}，post用data:{}

32.用js的new date()这个方法如果日期写成用"-"隔开的如："2020-12-11 10:10:00"可能会出现兼容性问题，如果用"/"就不会出现兼容性问题如："2020/12/11 10:10:00"

33. npm shrinkwrap 会生成一个当前已安装依赖的文件，可以用来锁版本或者排差版本号出错问题。注意：用了后改变依赖时要指定依赖的版本或者删除npm shrinkwrap生成文件才能成功

34.computed和watch的异同？
同：  两者都是只有在监听的值变化时才会触发。虽然computed可以多次调用，但是computed是基于响应式依赖进行缓存的，只在相关响应式依赖发生改变才会触发函数重新求值，不然会立即返回之前的计算结果。
不同：两者的侧重点不同，computed是计算属性，重点在于计算，所以一般如果涉及计算的话就用computed,而且其最后一定要return一个值。
      watch是监听属性，重点在于触发后的函数它是要干点什么，如需要在数据变化时执行异步或开销较大的这些操作时。
35.同步和异步
同步执行：从上到下执行
异步执行：先执行同步再执行异步，异步是先执行一次宏任务再执行完所有的微任务（如此反复直到所有多执行完）      
异步原理：异步就是宿主开辟出来完全受js进程主控制的子进程，且不可操作DOM。
异步任务：分为宏任务和微任务，
宏任务：整体的TS、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)
微任务：Promise.then、process.nextTick、Object.observe、MutationObserver、process.nextTick(Node.js 环境)
执行规则：先执行一次宏任务(第一次进来时就会执行整体的TS)，然后执行所有的微任务，再执行一次宏任务，然后执行所有的微任务，如此反复
注：XMLHttpRequest是I/O事件，所以是宏任务

36.当图片缩放文字、图像等失真怎么办？
在图片下加入下面代码可以恢复
image-rendering: -moz-crisp-edges;
image-rendering: -o-crisp-edges;
image-rendering: -webkit-optimize-contrast;
image-rendering: crisp-edges;
-ms-interpolation-mode: nearest-neighbor;

37. element-plus 的主题修改注意
要下载sass依赖 命令npm i sass，不仅仅要node-sass、sass-loader依赖，不然自己设置的主题是有可能会不起作用的。

38.Object.assign(target, sources)——对象合并/赋值
参数：target--->目标对象;source--->源对象，可以多个也用逗号隔开
返回值：target，即目标对象
如无重名的属性将两个或多个对象属性合并到一起，不改变原有对象的属性，
如有重名属性后面的对象会覆盖前面对象属性
